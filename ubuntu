#jetbrain tool box

    Open Console and change the directory

    cd /opt/

    Extract the file

    sudo tar -xvzf ~/Downloads/jetbrains-toolbox-1.xx.xxxx.tar.gz

    Rename the folder (not mandatory but it's easier for later use)

    sudo mv jetbrains-toolbox-1.xx.xxxx jetbrains

    Open JetBrains Toolbox

    jetbrains/jetbrains-toolbox

# miniconda
mkdir -p ~/miniconda3
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh
bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
rm -rf ~/miniconda3/miniconda.sh

~/miniconda3/bin/conda init bash
~/miniconda3/bin/conda init zsh

panda@panda-System-Product-Name:~/miniconda3/bin$ ./conda -V
conda 24.4.0


# colab versions
import sys
import torch
import tensorflow as tf
import sklearn
import keras
import transformers
import nltk
import spacy
import cv2
import torchvision
from PIL import Image

# Python版本
print("Python version:", sys.version)

# PyTorch版本
print("PyTorch version:", torch.__version__)
print("CUDA version:", torch.version.cuda)

# TensorFlow版本
print("TensorFlow version:", tf.__version__)
print("Scikit-learn version:", sklearn.__version__)
print("Keras version:", keras.__version__)

# Transformers库版本
print("Transformers version:", transformers.__version__)

# BERT模型和分词器版本
from transformers import BertModel, BertTokenizer
print("BERT Model version:", BertModel.from_pretrained('bert-base-uncased').config._name_or_path)
print("BERT Tokenizer version:", BertTokenizer.from_pretrained('bert-base-uncased').config._name_or_path)

# T5模型和分词器版本
from transformers import T5Model, T5Tokenizer
print("T5 Model version:", T5Model.from_pretrained('t5-small').config._name_or_path)
print("T5 Tokenizer version:", T5Tokenizer.from_pretrained('t5-small').config._name_or_path)

# 自然语言处理库版本
print("NLTK version:", nltk.__version__)
print("SpaCy version:", spacy.__version__)


# 计算机视觉库版本
print("OpenCV version:", cv2.__version__)
print("Torchvision version:", torchvision.__version__)
print("Pillow version:", Image.__version__)

Python version: 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]
PyTorch version: 2.3.0+cu121
CUDA version: 12.1
TensorFlow version: 2.15.0
Scikit-learn version: 1.2.2
Keras version: 2.15.0
Transformers version: 4.41.2

/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:89: UserWarning: 
The secret `HF_TOKEN` does not exist in your Colab secrets.
To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.
You will be able to reuse this secret in all of your notebooks.
Please note that authentication is recommended but still optional to access public models or datasets.
  warnings.warn(

config.json: 100%
 570/570 [00:00<00:00, 16.4kB/s]
model.safetensors: 100%
 440M/440M [00:06<00:00, 69.6MB/s]

BERT Model version: bert-base-uncased

tokenizer_config.json: 100%
 48.0/48.0 [00:00<00:00, 3.04kB/s]
vocab.txt: 100%
 232k/232k [00:00<00:00, 1.92MB/s]

#conda config
nano ~/.bashrc
export PATH="$HOME/miniconda3/bin:$PATH"
source ~/.bashrc
conda -V
conda 24.5.0

# create colab env, Python version: 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]
conda create -n colab_env python=3.10 

conda activate colab_env
conda env list
# conda deactivate


# go to https://developer.nvidia.com/cuda-12-1-0-download-archive
# choose right version 
wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb
sudo dpkg -i cuda-keyring_1.0-1_all.deb
sudo apt-get update
sudo apt-get -y install cuda

# cuda 12.1 and nvidia driver must match, not lastest one always works
# check : https://docs.nvidia.com/cuda/archive/12.1.0/


sudo apt-get purge nvidia-*

sudo apt-get autoremove

sudo apt-get autoclean

sudo rm -rf /etc/X11/xorg.conf

# https://developer.nvidia.com/cuda-12-1-0-download-archive?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=22.04&target_type=runfile_local
# runfile tell the nvidia version: sudo sh cuda_12.1.0_530.30.02_linux.run , so 530

sudo apt-get install nvidia-driver-530

sudo apt install cuda-12-1
